name: Go CLI CI/CD

on:
  push:
    branches:
      - v1  # Trigger on push to v1 branch (main branch)
  pull_request:
    branches:
      - v1

jobs:
  build:
    name: Build Go CLI
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.20'  # Make sure you're using the right Go version

      # Cache Go modules to speed up builds
      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Install Go dependencies
      - name: Install dependencies
        run: go mod tidy

      # Build the CLI tool
      - name: Build the CLI
        run: go build -o gospeedy-cli .

      # Optionally, upload the built binary as an artifact (for later use or download)
      - name: Upload built CLI as artifact
        uses: actions/upload-artifact@v2
        with:
          name: gospeedy-cli
          path: gospeedy-cli

  test:
    name: Run Go Tests
    runs-on: ubuntu-latest
    needs: build  # This ensures the tests only run after the build job completes

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.20'

      # Install Go dependencies
      - name: Install dependencies
        run: go mod tidy

      # Run the tests
      - name: Run Go tests
        run: go test -v ./...

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test  # This ensures the release only happens after tests pass

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Git for release creation
      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # Get the current version from your Go project or manually set it
      - name: Get Current Version
        id: get_version
        run: echo "::set-output name=version::$(git describe --tags --abbrev=0)"

      # Create a new release (using the current version as the release tag)
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: gospeedy-cli
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Tag the release
      - name: Tag the release
        run: |
          version="v${{ steps.get_version.outputs.version }}"
          git tag $version
          git push origin $version
